name: Continuous Delivery

on:
  push:
    branches: 
      - '**'

jobs:
  test:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Build
      run: dotnet build -c Release
    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal

  release:    
    name: Create Release
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # Fetches entire history, so we can analyze commits since last tag
        fetch-depth: 0
    - name: Determine Release Info
      id: release
      uses: Fresa/trunk-based-release-versioning@v0
    - name: Determine Version
      id: version
      run: |
        version=${{ steps.release.outputs.version }}
        if ${{ steps.release.outputs.is-prerelease }}; then
          version="$version-${{ github.ref_name }}-$(echo ${{ steps.release.outputs.release-ref }} | cut -c1-8)"
        fi

        echo "::set-output name=version::$version"
    - name: Convert Commit Logs to JSON
      id: convert-commit-logs
      uses: mikefarah/yq@v4.25.2
      with:
        cmd: yq ea -o=json 'select(. != null) | [.]' "$(echo "${{ steps.release.outputs.commit-logs-path }}" | sed "s|^${{ github.workspace }}/||")" | tee commit_logs.json
    - name: Generate Release Notes
      id: release_notes
      uses: Fresa/release-notes-generator@v1
      with:
        version: v${{ steps.version.outputs.version }}
        last_release_ref: ${{ steps.versioning.outputs.last-release-ref }}
        release_ref: ${{ steps.versioning.outputs.release-ref }}
        path_to_commits: ./commit_logs.json
    - name: Create Tag
      uses: actions/github-script@v3
      with:
        script: |
          github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/v${{ steps.version.outputs.version }}",
            sha: "${{ steps.release.outputs.release-ref }}"
          });
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
          body: ${{ steps.release_notes.outputs.release_notes }}
          tag_name: v${{ steps.version.outputs.version }}
          prerelease: ${{ steps.release.outputs.is-prerelease }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Update Latest Minor Tag
      uses: EndBug/latest-tag@v1
      if: steps.release.outputs.is-prerelease == 'false'
      with:
          tag-name: v${{ steps.release.outputs.major-version }}
          description: v${{ steps.version.outputs.version }}
    - name: Update Latest Patch Tag
      uses: EndBug/latest-tag@v1
      if: steps.release.outputs.is-prerelease == 'false'
      with:
          tag-name: v${{ steps.release.outputs.major-version }}.${{ steps.release.outputs.minor-version }}
          description: v${{ steps.version.outputs.version }}
    - name: Pack
      run: dotnet pack Test.It.With.RabbitMQ.091/Test.It.With.RabbitMQ.091.csproj -c Release -o nuget-packages -p:PackageVersion=${{ steps.release.outputs.version }} -p:PackageReleaseNotes="${{ steps.release_notes.outputs.release_notes }}"
    - name: Publish to nuget.org
      run: dotnet nuget push nuget-packages/Test.It.With.RabbitMQ.091.${{ steps.release.outputs.version }}.nupkg --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json
